/* Your first join */
In this exercise, you'll use the cities and countries tables to build your first inner join. You'll start off by selecting all columns in step 1, performing your join in step 2, and then refining your join to choose specific columns in step 3.

Begin by selecting all columns from the cities table, using the SQL shortcut that selects all.
-- Select all columns from cities
SELECT *
FROM cities

Perform an inner join with the cities table on the left and the countries table on the right; you do not need to alias tables here.
Join ON the country_code and code columns, making sure you identify them with the correct table.
SELECT * 
FROM cities 
-- Inner join to countries
INNER JOIN countries
-- Match on country codes
ON cities.country_code = countries.code;


Complete the SELECT statement to keep three columns: the name of the city, the name of the country, and the region the country is located in (in this order).
Alias the name of the city AS city and the name of the country AS country.
-- Select name fields (with alias) and region 
SELECT cities.name AS city, countries.name AS country, region
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;

/*Joining with aliased tables*/
You'll practice joining with aliased tables using data from both the countries and economies tables to examine the inflation rate in 2010 and 2015.
When writing joins, many SQL users prefer to write the SELECT statement after writing the join code, in case the SELECT statement requires using table aliases.


Start with your inner join in line 5; join the tables countries AS c (left) with economies (right), aliasing economies AS e.
Next, use code as your joining field in line 7; do not use the USING command here.
Lastly, select the following columns in order in line 2: code from the countries table (aliased as country_code), name, year, and inflation_rate.
-- Select fields with aliases
SELECT c.code AS country_code,name, year, inflation_rate
FROM countries AS c
-- Join to economies (alias e)
INNER JOIN economies AS e
-- Match on code field using table aliases
ON c.code=e.code;

/*USING in action*/
Use the country code field to complete the INNER JOIN with USING; do not change any alias names.
SELECT c.name AS country, l.name AS language, official
FROM countries AS c
INNER JOIN languages AS l
-- Match using the code column
USING(code);

